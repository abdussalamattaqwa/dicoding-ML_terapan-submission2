# -*- coding: utf-8 -*-
"""Submissiion 2 ML Terapan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1De0kZP395xTKQyyp0nMXfdRB_Vx918eK

Nama : Abd Salam At Taqwa

# Laporan Proyek Machine Learning - Abd Salam At Taqwa
## Project Overview

Pasar industri film luar negeri hingga film dalam negeri diperkirakan akan semakin berkembang.  Dilihat dari  jumlah penonton film pada bioskop yang terus meningkat setiap tahunnya. Berdasarkan sumber pada [[1]](https://www.statista.com/statistics/307390/number-of-cinema-admissions-worldwide/) memperkirakan bioskop di seluruh dunia akan menjual 5,7 miliar tiket pada akhir tahun 2022, naik 73 persen dari tahun sebelumnya. Pendapatan bioskop global akan berjumlah sekitar 38 miliar dolar AS pada tahun 2022. Angka tersebut diproyeksikan akan terus tumbuh pada tahun-tahun berikutnya, meskipun dengan laju yang lebih lambat setelah tahun 2023.

Seiring dengan berkembangnya teknologi *platform* untuk menonton film mulai bermunculan seperti Netflix, Disney+ Hotstar, HBO Go, Vidio, iQiyi, Klik Film, Bioskop Online, Cinema Box, Viu, CatchPlay+, WeTV, Genflix, iFlix, Viki, Prime Video. Platform-platform tersebut menerapkan sistem rekomendasi untuk membantu miliaran penggunanya menemukan konten yang dipersonalisasi dari kumpulan film yang tersedia [[2,](https://www.ijcai.org/Proceedings/2019/0284.pdf)[3](https://dl.acm.org/doi/abs/10.1145/3469213.3470423)]. Sebagai cara terbaik untuk mengatasi kelebihan informasi, sistem rekomendasi banyak digunakan untuk menyediakan konten dan layanan yang dipersonalisasi kepada pengguna dengan efisiensi tinggi [[4]](https://www.mdpi.com/2227-7390/11/4/895). Ketika sistem rekomendasi film berbasis konten digunakan, pengguna akan menerima beberapa film rekomendasi yang sangat mirip dengan film yang ditonton pengguna sebelumnya. Dalam sistem jenis ini, film umumnya dikelompokkan ke dalam kategori berbeda sesuai dengan kesamaannya. Atas dasar ini, sistem dapat merekomendasikan beberapa film potensial kepada pengguna berdasarkan preferensi tontonan pengguna yang direkam dalam database. Pada penelitian [[5]](https://j-ptiik.ub.ac.id/index.php/j-ptiik/article/view/9163) membuat sistem rekomendasi *content based filtering* dengan mencari kemiripan bobot dari *term* pada *bag of words*. Penelitian tersebut memanfaatkan fitur sinopsis film dan judul film untuk mencari kemiripan bobot antara film di dataset.

Berdasarkan latar belakang diatas proyek ini ingin membuat Sistem rekomendasi  data film yang mendeteksi kemiripan antara film yang Anda tonton dengan film lainnya menggunakan data fitur *titleType* dan *genres* pada film. Kedua data fitur tersebut selanjutnya digunakan untuk mencari dan mengurutkan film yang memiliki kemiripan yang sama. tahap awal sebelum mencari kemiripan dilakukan dengan proses *preprocessing* dimana data diolah sebelum dimasukkan kedalam model. *Feature extraction* adalah salah satu tahap *preprocessing* dimana teknik pengambilan ciri / *feature* dari suatu bentuk yang nantinya nilai yang didapatkan akan dianalisis untuk proses selanjutnya. Pada sub-tahapan *text feature extraction*, terdapat dua jenis metode yang
diujicobakan, yaitu CountVectorizer dan TfidfVectorizer seperti yang dilakukan pada penelitian [[6]](https://pdfs.semanticscholar.org/3e3d/6b45d7e31f8a1e03ca7b94c1e360dac08e30.pdf). Hasil dari *feature extraction* selanjutnya digunakan untuk mencari kemiripan antar video.Kemiripan antara video dicari menggunakan metode *cosine similarity*. *Cosine similarity* adalah ukuran kesamaan antara dua buah vektor dalam sebuah ruang dimensi yang didapat dari nilai cosinus sudut dari perkalian dua buah vektor [[7]](https://ejournal.itn.ac.id/index.php/jati/article/download/364/351). Semakin banyak data maka semakin banyak memori yang digunakan untuk menyimpan hasil perkalian dua vektor dari metode *cosine similarity*. Berdasarkan hal tersebut pada proyek ini data yang digunakan dibatasi hanya berupa data video selama tahun terakhir saja. Selain metode kemiripan, proses pengurutan menggunakan fitur rating video sebagai pertimbangan untuk sistem rekomendasi. fitur rating video digunakan karena semakin tinggi rating video tersebut maka semakin berkualitas dan layak untuk ditonton. Sistem rekomendasi ini diharapkan dapat memudahkan pengguna karena tidak perlu lagi membuang waktu untuk mencari film atau video yang diinginkan satu per satu.


## Business Understanding

### Problem Statements

Berdasarkan latar belakang diatas, masalah yang dapat diangkat pada proyek ini adalah:
- Bagaimana membuat sistem rekomendasi video untuk pengguna?
- Bagaimana mencari kemiripan antar video berdasarkan data fitur *titleType* dan *genres* menggunakan *cosine similarity*?
- Bagaimana menambahkan data rating video sebagai parameter tambahan untuk merekomendasikan video?

### Goals

Tujuan proyek adalah sebagai berikut:
- Membuat sistem rekomendasi video untuk memudahkan pengguna agar untuk mencari video yang diinginkan.
- Menggunakan fitur *titleType* dan *genres* pada video untuk mencari kemiripan antar video pada dataset.
- Menggunakan fitur *rating* video sebagai parameter tambahan untuk mengurutkan daftar-daftar rekomendasi video.

## Data Understanding
Dataset pada proyek ini menggunakan dataset IMDB yang menyediakan data-data mengenai berbagai macam jenis film. Dataset tersedia dan dapat diunduh pada situs [kaggle](https://www.kaggle.com/datasets/ashirwadsangwan/imdb-dataset/data).

Variabel-variabel pada IMDB dataset adalah sebagai berikut:
* tconst : Pengidentifikasi unik alfanumerik dari judul.
* titleType: jenis/format judul (misalnya *movie*, *short*,
*tvseries*, *tvepisode*, *video*, dll).
* primaryTitle : Versi paling terkenal dari judulnya
* originalTitle : Judul asli, dalam bahasa aslinya.
* isAdult : 0 untuk judul non-dewasa, dan 1 untuk judul dewasa.
* startYear : Mewakili tahun rilis suatu judul. Dalam kasus *tvseries*, ini adalah tahun awal serial tersebut.
* endYear : *tvseries* akhir tahun. untuk semua jenis judul lainnya.
* runtimeMinutes : Runtime utama dari judul, dalam hitungan menit
* genres : Mencakup hingga tiga genre yang terkait dengan judul.

## Data Preparation
Data preparation adalah proses menyiapkan data mentah sehingga layak untuk diproses kedalam model

## *Assessing Data*

Penilaian data dapat membantu organisasi meningkatkan kualitas datanya dan menghindari kesalahan yang merugikan. Hal ini juga membantu untuk mengambil keputusan yang lebih baik dengan memberikan wawasan tentang bagaimana data digunakan.

_Menginstall kaggle yang digunakan sebagai sumber dataset pada proyek ini_
"""

! pip install -q kaggle

"""_Mengupload file kaagle.json sebagai kaggle API yang di dapatkan dari akun kaggle_"""

from google.colab import files
files.upload()

"""_Mengubah permission dari file yang diupload sebelumnya agar bisa digunakan_"""

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

"""_Mendownload dataset_"""

! kaggle datasets download -d ashirwadsangwan/imdb-dataset

"""_Membuat folder dan mengekstrak dataset pada folder tersebut_"""

! mkdir imdb-dataset
! unzip imdb-dataset.zip -d imdb-dataset

"""_Mengimport setiap librari yang akan digunakan_"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""_Membaca dan menampilkan imdb dataset_

Pada Tabel 1 diperlihatkan beberapa baris dataset video yang akan digunakan pada proyek ini.  Dataset ini berisi data video beserta fitur-fiturnya. Adapun fitur yang digunakan pada Tabel1 untuk menghitung kemiripan antar video adalah fitur *titleType* dan *genres*.
"""

imdb = pd.read_table('./imdb-dataset/title.basics.tsv/data.tsv')
imdb.head()

"""_Membaca dan menampilkan imdb rating dataset_

Pada Tabel 2 membaca dataset rating untuk masing-masing video. Fitur pada dataset ini, yaitu averageRating dibutuhkan sebagai parameter tambahan untuk sistem rekomendasi video yang akan dibuat. Video dengan rating tertinggi menyediakan video yang berkualitas berdasarkan penilaian pengguna dan memungkinkan akan dipilih oleh pengguna lain.
"""

imdb_ratings = pd.read_table('./imdb-dataset/title.ratings.tsv/data.tsv')
imdb_ratings.head()

"""_Menyatukan kedua dataset berdasarkan unique value masing-masing video_

Pada Tabel 3 kedua dataset video dan rating video digabungkanmenjadi satu dataset. Dataset yang disatukan selanjutnya akan menjadi dataset utama untuk sistem rekomendasi proyek ini. Dataset video yang digunakan hanya berupa dataset yang memiliki rating video saja. Penggabungan kedua dataset menggunakan *right join* akan menghilangkan video yang tidak memiliki data rating dan tidak akan digunakan pada proyek ini.

Seperti yang terlihat pada dataset, dataset yang tidak memiliki data akan diisi dengan nilai "\N". Pada proyek ini data-data yang memiliki nilai "\N" pada fitur startYear, genres, dan titleType akan dihilangkan. Dataset selanjutnya akan memfilter video-video yang keluar ditahun saat ini saja. Video dengan keluaran tahun saat ini, yaitu tahun 2024 yang akan digunakan untuk proyek ini. Hal ini dikarenakan metode untuk mencari kemiripan video menggunakan *cosine similaity* memerlukan memori yang besar sehingga dataset dibatasi hanay berupa video ditahun 2024 saja.
"""

imdb = imdb.join(imdb_ratings.set_index('tconst'), on='tconst', how='right')
imdb.head()

"""_Menghapus data yang diisi nilai null untuk fitur startYear dan genres_"""

imdb.drop(imdb[imdb['startYear'] == "\\N" ].index, inplace = True)
imdb.drop(imdb[imdb['genres'] == "\\N" ].index, inplace = True)
imdb.drop(imdb[imdb['titleType'] == "\\N" ].index, inplace = True)

"""_Mendapatkan tahun sekarang_"""

import datetime
today = datetime.date.today()

year = today.year
print(year)

"""_Mengubah tipe data fitur startYear dan memfilter data yang tersedia hanya selama setahun terakhir_"""

imdb['startYear'] = imdb['startYear'].astype(int)
imdb = imdb[imdb['startYear'] > (year-1) ]

"""_Mendapatkan informasi dataset_

Tabel 4 menyediakan informasi dataset yang digunakan. Berdasarkan informasi pada dataset didapatkan bahwa fitur pada dataset berjumlah 11 dan dataset memiliki jumlah 1194. Setiap fitur pada dataset tidak memiliki nilai null atau kosong. Tujuan untuk pengecekan ini adalah untuk melakukan penanganan jika terdapat nilai null atau data yang hilang pada dataset. Penyebab data yang hilang dapat berupa kerusakan data atau kegagalan pencatatan data. Penanganan data yang hilang sangat penting selama prapemrosesan kumpulan data karena banyak algoritma yang tidak mendukung dataset dengan nilai yang hilang.
"""

imdb.info()

"""_Mendapatkan informasi statistik dataset_

Analisis statistik juga diperlukan dalam dataset. Analisis statistik dibutuhkan untuk menganalisis penyebaran data masing-masing fitur dengan tipe data *integer* untuk melihat apakah ada data anomali. Tabel 5 menyediakan informasi statistik pada dataset yang digunakan. *Count* mrtupakan jumlah data untuk masing-masing fitur. *Min* dan *max* selanjutnya adalah nilai terkecil dan nilai terbesar dari suatu fitur. *Mean* (rata-rata) merupakan suatu ukuran pemusatan data. *Mean* suatu data juga merupakan statistik karena mampu menggambarkan bahwa data tersebut berada pada kisaran *mean* data tersebut. *Median* menentukan letak tengah data setelah data disusun menurut urutan nilainya. Bisa juga nilai tengah dari data-data yang terurut. Simbol untuk *median* adalah Me. Dengan *median* Me, maka 50% dari banyak data nilainya paling tinggi sama dengan Me, dan 50% dari banyak data nilainya paling rendah sama dengan Me. Dalam mencari *median*, dibedakan untuk banyak data ganjil dan banyak data genap. Standar deviasi adalah ukuran statistik yang digunakan untuk mengukur sejauh mana data dalam sebuah himpunan cenderung bervariasi dari nilai rata-ratanya. Standar Deviasi dan *Varians* Salah satu teknik statistik yg digunakan untuk menjelaskan homogenitas kelompok. *Varians* merupakan jumlah kuadrat semua deviasi nilai-nilai individual thd rata-rata kelompok. Sedangkan akar dari *varians* disebut dengan standar deviasi atau simpangan baku. Standar Deviasi dan *Varians* Simpangan baku merupakan variasi sebaran data. Semakin kecil nilai sebarannya berarti variasi nilai data makin sama Jika sebarannya bernilai 0, maka nilai semua datanya adalah sama. Semakin besar nilai sebarannya berarti data semakin bervariasi.

Informmasi statistik dataset pada Tabel 5 didapatkan bahwa keseluruhan videopada dataset adalah video dengan keluaran tahun 2024. Video dengan rating terkecil dan terbesar adalah video dengan rating 2 dan 10. Rata-rata video pada dataset memiliki rating sebesar 7,5. Jumlah *vote* pada video yang paling kecil adalah 5 dan video yang memiliki *vote* terbanyak adalah sebanyak 29356.
"""

imdb.describe()

"""_Plot distribusi rating pada dataset_

Distribusi untuk setiap rating video dapat dilihat pada Gambar 1. Berdasarkan hasil visualisasi didapatkan bahwa video yang memiliki rating 1 hingga 5 memiliki jumlah video yang sedikit. Bahkan video yang memiliki rating tertinggi yaitu 10 memiliki jumlah video yang lebih banyak dengan video yang memiliki rating 1 hingga 5 jika digabungkan. Hal ini menandakan bahwa dataset yang digunakan pada proyek ini memiliki dataset video yang cenderung memiliki video dengan rating yang tinggi.
"""

imdb['averageRating'].plot(kind='hist', edgecolor='black')

"""_Ekstraksi fitur dari fitur genre menggunakan metode CountVectorizer_

*CountVectorizer* adalah metode dasar pengukuran kata
dengan menghitung jumlah kemunculan masing-masing kata
pada dokumen, sehingga dapat disebut juga sebagai metode
raw count. Implementasi metode ini akan menghasilkan
sparse matrix. Perhitungan kemunculan kata adalah
metode yang sederhana, namun jika kata-kata sering muncul
pada banyak dokumen, kemungkinan jumlah kemunculan
kata yang besar mungkin tidak berarti banyak dalam vektor
kepentingan.
"""

from sklearn.feature_extraction.text import CountVectorizer

temp =  imdb.genres.dropna()
vec = CountVectorizer(token_pattern='(?u)\\b[\\w-]+\\b', analyzer='word').fit(temp)
bag_of_genres = vec.transform(temp)
unique_genres = vec.get_feature_names_out()
np.array(unique_genres)

"""_Plot distribusi setiap genre pada dataset_

Gambar 2 memvisualisasikan distribusi setiap genre pada video. Berdasarkan hasil visualisasi didapatkan bahwa dataset memiliki lebih banyak video dengan *genre* drama dibandingkan dengan *genre* lainnya pada tahun 2024. Video dengan *genre* *musical* merupakan video yang memiliki jumlah sedikit pada tahun 2024.
"""

# Create DataFrame of genres
genres = pd.DataFrame(bag_of_genres.todense(), columns=unique_genres, index=temp)

# Calculate genre percentages
genre_percentages = 100 * genres.sum() / genres.shape[0]
sorted_genres_perc = genre_percentages.sort_values(ascending=False)

# Plotting
plt.figure(figsize=(15, 8))
sns.barplot(x=sorted_genres_perc, y=sorted_genres_perc.index, orient="h")
plt.xlabel("Percentage of Films (%)")
plt.show()

"""_Plot distribusi fitur titleType pada dataset_

Visualisasi untuk distribusi fitru titleType dapat dilihat pada Gambar 3. Berdasarkan hasil visualisasi pada dataset didapatkan bahwa video dengan jenis *tvEpisode* adalah video yang paling banyak dibuat, dan video dengan jenis hanya berupa video memiliki jumlah yang paling sedikit pada tahun 2024. Video dengan jenis tvEpisode memiliki jumlah yang sangat banyak. Pada dataset 70.2% berisi video dengan jenis tvEpisode. Apabila seluruh video dengan jenis yang lain digabungkan jumlahnya maka video dengan jenis tvEpisode tetap memiliki jumlah yang lebih banyak dibandingkan video dengan jenis lainnya.
"""

feature = 'titleType'
count = imdb[feature].value_counts()
percent = 100*imdb[feature].value_counts(normalize=True)
data = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(data)
count.plot(kind='bar', title=feature);

"""_Visualisasi untuk fitur averageRating, numVotes, dan titleType_

Pada Gambar 4 memvisualisasikan untuk fitur averageRating, numVotes, dan titleType. Berdasarkan hasil visualisasi didapatkan bahwa video dengan jenis tvEpisode meskipun memilki jumlah yang banyak namun jumlah *vote* pada video tersebut memiliki jumlah *vote* yang sedikit. Voting adalah suatu kegiatan untuk menentukan pendapat melalui suara terbanyak. Video dengan jenis *movie* meskipun jumlahnya lebih sedikit namun kebanayk video dengan jenis ini memiliki jumlah *vote* yang banyak. Hal ini menandakan bahwa meskipun jenis video yang paling banyak dikeluarkan pada tahun 2024 adalah tvEpisode tidak menjamin setiap video memiliki *vote* yang banyak. Terdapat satu data video dengan jenis tvMiniSeries yang memiliki *vote* yang terbanyak dibandingkan video yang lainnya.
"""

import seaborn as sns
sns.lmplot(
    data=imdb,
    x="averageRating",
    y="numVotes",
    height=5,
    aspect=2,
    hue="titleType",
    scatter_kws={"s": 8},
    line_kws={"linewidth": 1},
)
plt.title("averageRating and numVotes VS titleType", fontsize=14, color="#0a2e4f")
plt.show()

"""_Inisialisasi TF-IDF Vectorizer untuk menggunakan metode TF-IDF pada fitur titleType_

Pada tahap akhir dari *preprocessing* adalah *term-weighting*.*Term-weighting* merupakan proses pemberian bobot *term* pada dokumen. Pembobotan ini digunakan nantinya oleh *cosine similarity* untuk mencari kemiripan antar video. Pemberian bobot atau ekstraksi fitur pada setiap data  menggunakan metode TF-IDF. TF-IDF adalah cara lain untuk mengevaluasi pentingnya kata dalam sebuah dokumen. Skor yang dihasilkan dari setiap fitur TF-IDF adalah perkalian dari *term frequency* dan *inverse document frequency*.
"""

from sklearn.feature_extraction.text import TfidfVectorizer

tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data cuisine
tf.fit(imdb['titleType'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

"""_Transformasi hasil Vectorizer pada fitur titleType_"""

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(imdb['titleType'])

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

"""_Mengubah vektor tf-idf kedalam bentuk matriks_"""

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

"""_Menggabungkan semua fitur yang akan dicari masing-masing tingkat kemiripan satu sama lain_"""

feature_matrix = np.concatenate((tfidf_matrix.todense(), bag_of_genres.todense()), axis = 1)

feature_matrix.shape

"""_Mendapatkan kolom dari penggabungan kedua fitur titleType dan genres_"""

feature_column = np.concatenate((tf.get_feature_names_out(), vec.get_feature_names_out()), axis = 0)
feature_column

"""## Modeling
Tahapan ini melakukan proses mencari kemiripan antar video berdasarkan ekstraksi fitur menggunakan CountVectorizer dan TfidfVectorizer. Metode yang digunakan adalah *cosine similairty* karena berfungsi untuk mengukur kesamaan dokumen dalam analisis teks. *Cosine similairty* mengukur kesamaan antara dua vektor. Kesamaan diukur dengan jarak sudut kosinus antara dua vektor dan menentukan apakah dua vektor menunjuk pada arah yang sama.

_Menghitung cosine similarity pada matrix tf-idf_
"""

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(np.asarray(feature_matrix))

"""_Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama originalTitle_"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=imdb['originalTitle'], columns=imdb['originalTitle'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada setiap resto
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)



"""## Evaluation

Pada tahap ini dilakaukan proses mencari rekomendasi video dan memunculkan video-video yang direkomendasikan untuk ditonton. Rekomendasi video dicari menggunakan hasil dari pengukuran *cosine similarity*. Tahap pencarian video dilakukan dengan mencari video yang memiliki kemiripan yang tinggi kemudian diurutkan berdasarkan data rating video.

_Reset index dataframe untuk menggabungkan dataframe yang berisi data video dan tingkat kemiriman masing-masing video yang dihasilkan dari perhitungan cosine similarity_
"""

imdb = imdb.reset_index().drop(columns=['index'])
similarity_data = cosine_sim_df.reset_index().drop(columns=['originalTitle'])
similarity_data.index.names = ['index']

final_result = pd.concat([imdb, similarity_data], axis=1)
final_result

"""_Membuat fungsi video_recommendations_"""

def video_recommendations(original_title, items=['originalTitle', 'genres', 'averageRating'], k=5):
    """
    Rekomendasi video berdasarkan kemiripan dataframe

    Parameter:
    ---
    original_title : tipe data string (str)
                Nama Video Original (index kemiripan dataframe)
    items : array
            Mengandung kedua nama dan fitur lainnya yang digunakan untuk mendefinisikan kemiripan
    k : tipe data integer (int)
        Banyaknya jumlah rekomendasi yang diberikan
    ---


    Pada index ini, kita mengambil k dengan nilai similarity terbesar
    pada index matrix yang diberikan (i).
    """


    res = final_result.sort_values(by=[original_title, 'averageRating'], ascending=False)
    res.drop(res[res['originalTitle'] == original_title ].index, inplace = True)

    return res.head(k)[items]

"""_Mencari data video berdasarkan originalTitle_"""

imdb[imdb.originalTitle.eq('Tati Part Time')]

"""_Mendapatkan uruean rekomendasi video berdasarkan fitur titleType, originalTitle dan raing video_"""

video_recommendations('Tati Part Time')

"""# Referensi

[1]  Statista Research Department. 2023. Number of cinema admissions worldwide from 2017 to 2026, dapat diaskes pada link https://www.statista.com/statistics/307390/number-of-cinema-admissions-worldwide/

[2] Cai, J. J., Tang, J., Chen, Q. G., Hu, Y., Wang, X., & Huang, S. J. (2019, August). Multi-View Active Learning for Video Recommendation. In IJCAI (Vol. 2019, pp. 2053-2059).

[3] Qin, Z., & Zhang, M. (2021, May). Towards a personalized movie recommendation system: A deep learning approach. In 2021 2nd International Conference on Artificial Intelligence and Information Systems (pp. 1-5).

[4] Mu, Y., & Wu, Y. (2023). Multimodal movie recommendation system using deep learning. Mathematics, 11(4), 895.

[5] Fajriansyah, M., Adikara, P. P., & Widodo, A. W. (2021). Sistem Rekomendasi Film Menggunakan Content Based Filtering. Jurnal Pengembangan Teknologi Informasi dan Ilmu Komputer, 5(6), 2188-2199.

[6] Averina, A., Hadi, Helen., Siswantoro, Joko. (2022). Analisis Sentimen Multi-Kelas Untuk Film Berbasis Teks Ulasan Menggunakan Model Regresi Logistik. TEKNIKA, 11(2), 123-128.

[7] Fataruba, F. (2018). Penerapan Metode Cosine Similarity Untuk Pengecekan Kemiripan Jawaban Ujian Siswa. JATI (Jurnal Mahasiswa Teknik Informatika), 2(2), 88-95.
"""